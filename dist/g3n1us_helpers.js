(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["g3n1us_helpers"] = factory();
	else
		root["g3n1us_helpers"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/g3n1us_helpers.js":
/*!*******************************!*\
  !*** ./src/g3n1us_helpers.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar g3n1us_helpers = {\n  ltrim: function ltrim(str, charlist) {\n    charlist = !charlist ? \" \\\\s\\xA0\" : (charlist + '').replace(/([\\[\\]\\(\\)\\.\\?\\/\\*\\{\\}\\+\\$\\^:])/g, '$1');\n    var re = new RegExp('^[' + charlist + ']+', 'g');\n    return (str + '').replace(re, '');\n  },\n  rtrim: function rtrim(str, charlist) {\n    charlist = !charlist ? \" \\\\s\\xA0\" : (charlist + '').replace(/([\\[\\]\\(\\)\\.\\?\\/\\*\\{\\}\\+\\$\\^:])/g, '\\\\$1');\n    var re = new RegExp('[' + charlist + ']+$', 'g');\n    return (str + '').replace(re, '');\n  },\n  randid: function randid() {\n    return 'ID' + Math.round(Math.random() * 100000);\n  },\n  getArgs: function getArgs(func) {\n    // First match everything inside the function argument parens.\n    var args = func.toString().match(/function\\s.*?\\(([^)]*)\\)/)[1]; // Split the arguments string into an array comma delimited.\n\n    return args.split(',').map(function (arg) {\n      // Ensure no inline comments are parsed and trim the whitespace.\n      return arg.replace(/\\/\\*.*\\*\\//, '').trim();\n    }).filter(function (arg) {\n      // Ensure no undefined values are added.\n      return arg;\n    });\n  },\n  filter_int: function filter_int(num) {\n    if (typeof num !== \"string\") return num;else if (isNaN(parseInt(num))) return num;else return parseInt(num);\n  },\n  str_contains: function str_contains(haystack, needle) {\n    return haystack.indexOf(needle) !== -1;\n  },\n  str_slug: function str_slug(text) {\n    return text.toString().toLowerCase().replace(/\\s+/g, '-') // Replace spaces with -\n    .replace(/[^\\w\\-]+/g, '') // Remove all non-word chars\n    .replace(/\\-\\-+/g, '-') // Replace multiple - with single -\n    .replace(/^-+/, '') // Trim - from start of text\n    .replace(/-+$/, ''); // Trim - from end of text\n    // Thanks @mathewbyrne: https://gist.github.com/mathewbyrne/1280286\t\t\t\n  },\n  starts_with: function starts_with(string, needle) {\n    return string.slice(0, needle.length) == needle;\n  },\n  in_array: function in_array(needle, haystack) {\n    return haystack.indexOf(needle) !== -1;\n  },\n  array_where: function array_where(arr, callback) {\n    var first = null;\n    arr.forEach(function (item) {\n      if (callback(item)) first = item;\n    });\n    return first;\n  },\n  str_rand: function str_rand(length) {\n    length = !length ? 5 : length;\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (var i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n\n    return text;\n  },\n  array_get: function array_get(obj, prop, _default) {\n    var _default = _default || null;\n\n    return typeof obj[prop] !== \"undefined\" ? obj[prop] : _default;\n  },\n  // below is alias to above function\n  object_get: function object_get(obj, prop, _default) {\n    return array_get(obj, prop, _default);\n  },\n  array_rand: function array_rand(arr) {\n    var len = arr.length;\n    var i = Math.ceil(Math.random() * len) - 1;\n    return arr[i];\n  },\n  array_keys_by: function array_keys_by(key, array) {\n    var keys = [];\n    array.forEach(function (item) {\n      keys.push(item[key]);\n    });\n    return keys;\n  },\n  array_filter: function array_filter(arr, callback) {\n    var filtered = [];\n    arr.forEach(function (v, k) {\n      if (callback(v, arr)) {\n        filtered.push(v);\n      }\n\n      ;\n    });\n    return filtered;\n  },\n  array_diff: function array_diff(sharedkey, array1, array2) {\n    var array1keys = this.array_keys_by(sharedkey, array1);\n    var array2keys = this.array_keys_by(sharedkey, array2);\n    var resultingarray = [];\n    array1.forEach(function (array1item) {\n      if (!g3n1us_helpers.in_array(array1item[sharedkey], array2keys)) resultingarray.push(array1item);\n    });\n    return resultingarray;\n  },\n  array_except: function array_except(obj, excluded_keys) {\n    var newobj = {};\n\n    for (key in obj) {\n      if (!g3n1us_helpers.in_array(key, excluded_keys)) newobj[key] = obj[key];\n    }\n\n    return newobj;\n  },\n  array_only: function array_only(obj, included_keys) {\n    var newobj = {};\n    included_keys.forEach(function (item) {\n      newobj[item] = obj[item];\n    });\n    return newobj;\n  },\n  array_dot: function array_dot(obj) {\n    var res = {};\n\n    (function recurse(obj, current) {\n      for (var key in obj) {\n        var value = obj[key];\n        var newKey = current ? current + \".\" + key : key; // joined key with dot\n\n        if (value && _typeof(value) === \"object\") {\n          res[newKey] = value;\n          recurse(value, newKey); // it's a nested object, so do it again\n        } else {\n          res[newKey] = value; // it's not an object, so set the property\n        }\n      }\n    })(obj);\n\n    return res;\n  },\n  is_array: function is_array(possible_array) {\n    return _typeof(possible_array) === \"object\" && typeof possible_array.length === \"number\";\n  },\n  array_pluck: function array_pluck(obj, val) {\n    var results = [];\n\n    for (var i in obj) {\n      var dotobj = g3n1us_helpers.array_dot(obj[i]);\n      results.push(dotobj[val]);\n    }\n\n    return results;\n  },\n  ucwords: function ucwords(str) {\n    return (str + '').replace(/^([a-z])|\\s+([a-z])/g, function ($1) {\n      return $1.toUpperCase();\n    });\n  },\n  queryStringify: function queryStringify(requestquery) {\n    var str = '?';\n\n    for (key in requestquery) {\n      str += key + '=' + requestquery[key] + '&';\n    }\n\n    if (str.substr(-1) == '&') str = str.slice(0, -1);\n    return str;\n  },\n  merge_object: function merge_object(obj1, obj2) {\n    var obj3 = {};\n\n    for (var attrname in obj1) {\n      obj3[attrname] = obj1[attrname];\n    }\n\n    for (var attrname in obj2) {\n      obj3[attrname] = obj2[attrname];\n    }\n\n    return obj3;\n  },\n  array_merge: function array_merge(obj1, obj2) {\n    return g3n1us_helpers.merge_object(obj1, obj2);\n  },\n  // next is similar to above, but returns the original object with the seconds objects properties applied to it.\n  array_apply: function array_apply(dbobj, values) {\n    for (valuekey in values) {\n      dbobj[valuekey] = values[valuekey];\n    }\n\n    return dbobj;\n  },\n  objectify: function objectify(keyby, arr) {\n    var obj = {};\n    arr.forEach(function (val) {\n      obj[val[keyby]] = val;\n    });\n    return obj;\n  },\n  getMethods: function getMethods(obj) {\n    var res = [];\n\n    for (var m in obj) {\n      if (typeof obj[m] == \"function\") {\n        res.push(m);\n      }\n    }\n\n    return res;\n  },\n  array_last: function array_last(arr) {\n    return arr[arr.length - 1];\n  },\n  getHash: function getHash(key, separator) {\n    if (!separator) separator = '/';\n    var hash = g3n1us_helpers.rtrim(g3n1us_helpers.ltrim(window.location.hash, '/'), '/');\n    hash = g3n1us_helpers.rtrim(g3n1us_helpers.ltrim(hash, separator), separator);\n    var args = hash.split(separator);\n    var obj = {};\n    args.forEach(function (val) {\n      var kv = val.split('=');\n\n      if (kv.length != 2 || kv[0].length == 0 || kv[1].length == 0) {} else {\n        obj[kv[0]] = g3n1us_helpers.filter_int(kv[1]);\n      }\n    });\n    if (!key) return obj;else return obj[key];\n  },\n  setHash: function setHash(obj, hashchange) {\n    var hasharray = [];\n    if (!obj) obj = {};\n    var initialobj = g3n1us_helpers.getHash();\n    var ischanged = false;\n\n    for (testkey in obj) {\n      if (obj[testkey] != initialobj[testkey]) {\n        ischanged = true;\n        break;\n      }\n    }\n\n    if (ischanged) {\n      obj = g3n1us_helpers.array_merge(initialobj, obj);\n\n      for (key in obj) {\n        if (key && obj[key]) {\n          hasharray.push(key + '=' + obj[key]);\n        }\n      }\n\n      var hashstring = '/' + hasharray.join('/');\n      if (hashchange) window.location.hash = hashstring;else return hashstring;\n    }\n  },\n  form2Object: function form2Object($form, appendedObj) {\n    var returnVal = {};\n    /*\n    \t\tObject.defineProperty(returnVal, \"length\", { get: function () {\n    \t\t\tvar length = 0;\n    \t\t\tfor(var i in returnVal) length++;\n    \t\t\treturn length;\t\t\t\n    \t\t} });\n    */\n\n    $form.serializeArray().forEach(function (obj) {\n      returnVal[obj.name] = obj.value;\n    });\n\n    if (appendedObj) {\n      for (k in appendedObj) {\n        returnVal[k] = appendedObj[k];\n      }\n    }\n\n    if ($form.data('formdata')) {\n      var jsonExtra = $form.data('formdata');\n\n      for (k in jsonExtra) {\n        returnVal[k] = jsonExtra[k];\n      }\n    }\n\n    var length = 0;\n\n    for (var i in returnVal) {\n      length++;\n    }\n\n    returnVal.length = length;\n    return returnVal;\n  },\n  ends_with: function ends_with(string, ending) {\n    var realending = string.slice(ending.length * -1);\n    return ending == realending;\n  },\n  isset: function isset(variablename, obj) {\n    var findin = obj || window;\n    return typeof findin[variablename] !== \"undefined\";\n  },\n  istrue: function istrue(variablename, obj) {\n    var findin = obj || window;\n    return !(!g3n1us_helpers.isset(variablename) || !findin[variablename]);\n  },\n  array_unique: function array_unique(arr) {\n    var u = {},\n        a = [];\n\n    for (var i = 0, l = arr.length; i < l; ++i) {\n      if (u.hasOwnProperty(arr[i])) {\n        continue;\n      }\n\n      a.push(arr[i]);\n      u[arr[i]] = 1;\n    }\n\n    return a;\n  },\n  mime: function mime(filename) {\n    var path = filename.toLowerCase();\n    var mime = \"text/html\";\n    if (g3n1us_helpers.ends_with(path, \".css\")) mime = \"text/css\";else if (g3n1us_helpers.ends_with(path, \".less\")) mime = \"text/css\";else if (g3n1us_helpers.ends_with(path, \".sass\")) mime = \"text/css\";else if (g3n1us_helpers.ends_with(path, \".scss\")) mime = \"text/css\";else if (g3n1us_helpers.ends_with(path, \".mp4\")) mime = \"video/mp4\";else if (g3n1us_helpers.ends_with(path, \".mov\")) mime = \"video/quicktime\";else if (g3n1us_helpers.ends_with(path, \".js\")) mime = \"application/javascript\";else if (g3n1us_helpers.ends_with(path, \".pdf\")) mime = \"application/pdf\";else if (g3n1us_helpers.ends_with(path, \".svg\")) mime = \"image/svg+xml\";else if (g3n1us_helpers.ends_with(path, \".jpg\")) mime = \"image/jpeg\";else if (g3n1us_helpers.ends_with(path, \".jpeg\")) mime = \"image/jpeg\";else if (g3n1us_helpers.ends_with(path, \".png\")) mime = \"image/png\";else if (g3n1us_helpers.ends_with(path, \".gif\")) mime = \"image/gif\";else if (g3n1us_helpers.ends_with(path, \".ico\")) mime = \"image/vnd.microsoft.icon\";else if (g3n1us_helpers.ends_with(path, \".json\")) mime = \"application/json\";else if (g3n1us_helpers.ends_with(path, \".ttf\")) mime = \"application/x-font-truetype\";else if (g3n1us_helpers.ends_with(path, \".woff\")) mime = \"application/font-woff\";else if (g3n1us_helpers.ends_with(path, \".woff2\")) mime = \"application/font-woff2\";else if (g3n1us_helpers.ends_with(path, \".otf\")) mime = \"application/x-font-opentype\";else if (g3n1us_helpers.ends_with(path, \".eot\")) mime = \"application/vnd.ms-fontobject\";else if (g3n1us_helpers.ends_with(path, \".md\")) mime = \"text/markdown; charset=UTF-8\";else if (g3n1us_helpers.ends_with(path, \".swf\")) mime = \"application/x-shockwave-flash\";else if (g3n1us_helpers.ends_with(path, \".php\")) mime = \"text/html\";else if (g3n1us_helpers.ends_with(path, \".hbs\")) mime = \"text/x-handlebars-template\";else if (g3n1us_helpers.ends_with(path, \".json\")) mime = \"application/json\";else if (g3n1us_helpers.ends_with(path, \".zip\")) mime = \"application/zip\";else if (g3n1us_helpers.ends_with(path, \".csv\")) mime = \"application/csv\";else if (g3n1us_helpers.ends_with(path, \".doc\")) mime = \"application/msword\";else if (g3n1us_helpers.ends_with(path, \".docx\")) mime = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\";else if (g3n1us_helpers.ends_with(path, \".pptx\")) mime = \"application/vnd.openxmlformats-officedocument.presentationml.presentation\";else if (g3n1us_helpers.ends_with(path, \".xls\")) mime = \"application/vnd.ms-excel\";else if (g3n1us_helpers.ends_with(path, \".xlsx\")) mime = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";else if (g3n1us_helpers.ends_with(path, \".key\")) mime = \"application/x-iwork-keynote-sffkey\";else if (g3n1us_helpers.ends_with(path, \".pages\")) mime = \"application/x-iwork-pages-sffpages\";else if (g3n1us_helpers.ends_with(path, \".numbers\")) mime = \"application/x-iwork-numbers-sffnumbers\";\n    return mime;\n  },\n  is_image: function is_image(filename) {\n    return g3n1us_helpers.str_contains(g3n1us_helpers.mime(filename), 'image');\n  },\n  is_pdf: function is_pdf(filename) {\n    return g3n1us_helpers.str_contains(g3n1us_helpers.mime(filename), 'pdf');\n  },\n  is_url: function is_url(t) {\n    var expression = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi;\n    var regex = new RegExp(expression);\n    return t.match(regex);\n  },\n  is_video: function is_video(filename) {\n    return g3n1us_helpers.str_contains(g3n1us_helpers.mime(filename), 'video');\n  },\n  parse_url: function parse_url(url) {\n    var parser = document.createElement('a');\n    parser.href = url;\n    return {\n      protocol: parser.protocol,\n      hostname: parser.hostname,\n      port: parser.port,\n      pathname: parser.pathname,\n      search: parser.search,\n      hash: parser.hash,\n      host: parser.host\n    };\n  },\n  g3n1us_application_windows: {},\n  popupwindow: function popupwindow(url) {\n    var title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Window\";\n    var w = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 800;\n    var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 600;\n    var left = screen.width / 2 - w / 2;\n    var top = screen.height / 2 - h / 2;\n    console.log(g3n1us_helpers.g3n1us_application_windows[url]);\n\n    if (typeof g3n1us_helpers.g3n1us_application_windows[url] !== \"undefined\" && typeof g3n1us_helpers.g3n1us_application_windows[url].focus == \"function\" && !g3n1us_helpers.g3n1us_application_windows[url].closed) {\n      g3n1us_helpers.g3n1us_application_windows[url].focus();\n    } else g3n1us_helpers.g3n1us_application_windows[url] = window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);\n\n    return g3n1us_helpers.g3n1us_application_windows[url];\n  },\n  watch: function watch(obj, prop, handler) {\n    var oldval = obj[prop];\n    var newval = oldval;\n\n    var getter = function getter() {\n      return newval;\n    };\n\n    var setter = function setter(val) {\n      oldval = newval;\n      return newval = handler.call(obj, obj, prop, oldval, val);\n    };\n\n    if (delete obj[prop]) {\n      // can't watch constants\n      Object.defineProperty(obj, prop, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  },\n  unwatch: function unwatch(obj, prop) {\n    var val = obj[prop];\n    delete obj[prop]; // remove accessors\n\n    obj[prop] = val;\n  }\n};\n\nif (typeof window !== 'undefined') {\n  window.addEventListener('beforeunload', function (e) {\n    for (var i in g3n1us_helpers.g3n1us_application_windows) {\n      g3n1us_helpers.g3n1us_application_windows[i].close();\n    }\n  });\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (g3n1us_helpers);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/g3n1us_helpers.js\n");

/***/ }),

/***/ 0:
/*!*************************************!*\
  !*** multi ./src/g3n1us_helpers.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/seanrbethel/Sites/g3n1us-helpers/public_html/g3n1us_helpers.js/src/g3n1us_helpers.js */"./src/g3n1us_helpers.js");


/***/ })

/******/ })["default"];
});